Julius speech from github
--------
https://github.com/julius-speech/julius

===================================================================================================================
pyJulius
--------
https://pythonhosted.org/pyjulius/#

.. pyjulius documentation master file, created by
   sphinx-quickstart on Sun Jan  8 12:26:02 2012.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Introduction
============
Release v\ |version|

pyjulius provides a simple interface to connect to julius module server


Example
=======
First you will need to run julius with the *-module* option (documentation `here <http://julius.sourceforge.jp/juliusbook/ja/desc_module.html>`_
or man :manpage:`julius`).
Julius will wait for a client to connect, this is what :class:`~pyjulius.core.Client` does in a threaded way.

Let's just write a simple program that will print whatever the julius server sends until you press CTRL+C::

    #!/usr/bin/env python
    import sys
    import pyjulius
    import Queue
    
    # Initialize and try to connect
    client = pyjulius.Client('localhost', 10500)
    try:
        client.connect()
    except pyjulius.ConnectionError:
        print 'Start julius as module first!'
        sys.exit(1)
    
    # Start listening to the server
    client.start()
    try:
        while 1:
            try:
                result = client.results.get(False)
            except Queue.Empty:
                continue
            print repr(result)
    except KeyboardInterrupt:
        print 'Exiting...'
        client.stop()  # send the stop signal
        client.join()  # wait for the thread to die
        client.disconnect()  # disconnect from julius

If you are only interested in recognitions, wait for an instance of :class:`~pyjulius.models.Sentence` objects in the queue::

    if isinstance(result, pyjulius.Sentence):
        print 'Sentence "%s" recognized with score %.2f' % (result, result.score)

If you do not want :class:`~pyjulius.core.Client` to interpret the raw xml :class:`~xml.etree.ElementTree.Element`,
you can set :attr:`~pyjulius.core.Client.modelize` attribute to ``False``

If you encounter any encoding issues, have a look at the *-charconv* option of julius and set the :attr:`Client.encoding <pyjulius.core.Client.encoding>`
to the right value


API Documentation
=================
More details about the use of the module can be found here

States
------
.. autodata:: pyjulius.core.CONNECTED
.. autodata:: pyjulius.core.DISCONNECTED

Client
------
.. autoclass:: pyjulius.core.Client
    :members:

Models
------
Models are designed in order to represent the server response an object-oriented and easy way

.. automodule:: pyjulius.models
    :members:

Exceptions
----------
.. automodule:: pyjulius.exceptions
    :members:
    
======================================================================================================================================    
for obd
--------
guide for obd-pi
http://www.instructables.com/id/OBD-Pi/step4/Software-Installation/
#  sudo apt-get install python-serial
#  sudo apt-get install bluetooth bluez-utils blueman
#  sudo apt-get install python-wxgtk2.8 python-wxtools wx2.8-i18n libwxgtk2.8-dev
#  git clone https://github.com/Pbartek/pyobd-pi.git
================================================================================================


================================================================
pyOBD
--------
http://python-obd.readthedocs.io/en/latest/
================================================================================================

================================================================
to connect bluetooth elm327 to pi
--------

# > bluetoothctl -a
#bluetooth> trust AA:BB:CC:11:22:33
#bluetooth> connect AA:BB:CC:11:22:33
#bluetooth> quit
================================================================


================================================================================================
connect bluetooth to serial
--------

# > sudo rfcomm release all
# > sudo rfcomm bind 0 AA:BB:CC:11:22:33
================================================================================================

================================================================
use minicom to test connection
--------

# > minicom -o -s 
port: /dev/tty/rfcomm0
rate:9600 8N1
save as console
# > minicom -o console
================================================================================================

================================================================================================
for sienta(protocol toyota k-line) to use elm327 , run the following at command before query obd command
--------

atib96 \n atiia13 \n atsh8113f1 \n atspa4 \n atsw00

ref:http://blog.hycko.net/4572.php
================================================================================================


================================================================================================
pulseAudio to monitor soundoutput
--------
to run pulseAudio
1.#> pulseAudio -D
================================================================================================

================================================================================================
to get sound on RPI
--------

1. sudo apt-get install alsa-utils
2. sudo modprobe snd_bcm2835
3.sudo apt-get install alsa-utils is permanent, but sudo modprobe snd_bcm2835 only initialises the driver for the current session. To ensure the module is initialised on boot, add snd_bcm2835 to /etc/modules
================================================================================================


================================================================================================
to get rpi to talk, use google_speech or flite
--------

FOR GOOGLE SPEECH
(https://pypi.python.org/pypi/google_speech/)

Installation

Google Speech requires Python >= 3.3.

From PyPI (with PIP)
If you don’t already have it, install pip for Python 3 (not needed if you are using Python >= 3.4)
Install Google Speech: pip3 install google_speech
Install SoX, with MP3 support. On Ubuntu and other Debian derivatives: sudo apt-get install sox libsox-fmt-mp3. Windows users can download binaries on the SoX website, once installed you also need to copy libmad DLL in the directory where you have installed SoX, and to add this directory to your PATH environment variable.

Examples
Plane stall alarm:

google_speech -l en stall -e delay 0.5 overdrive 20 repeat 5 speed 0.9 gain -5

Female robot voice (idea from here):

google_speech -l en "Hello, I am a stupid robot voice" -e speed 0.9 overdrive 10 echo 0.8 0.7 6 0.7 echo 0.8 0.7 10 0.7 echo 0.8 0.7 12 0.7 echo 0.8 0.88 12 0.7 echo 0.8 0.88 30 0.7 echo 0.6 0.6 60 0.7


FOR FLITE
https://learn.adafruit.com/speech-synthesis-on-the-raspberry-pi/programs

sudo apt-get install flite

flite -t "All good men come to the aid of the rebellion"

flite -f jefferson-inaugural.txt

To use in python
import os
os.system("flite -t 'hellow i am flite'")
================================================================================================
